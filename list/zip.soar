##########################################################################
# Operator list*zip - zip two lists together
#
# ^operator
#   ^name list*zip
#   ^first <head-of-first-list>
#   ^second <head-of-second-list>
#   ^default <default-value-when-list-runs-out> (defaults to nil)
#   ^return-to <name-of-result-attribute> (defaults to "result")

sp {list*zip*elaborate*info
  "Add info about this operator to the lib*library structure on the
   top state."
  (state <s> ^superstate nil
             ^list*library.operators <ops>)
-->
  (<ops> ^list*zip <args>)
  (<args> ^default <def> 
          ^required <req>)
  (<def> ^return-to result
         ^default default)
  (<req> ^first nil
         ^second nil)
}

sp {list*zip*propose*init
  (state <s> ^name list*zip 
            -^cfirst 
            -^csecond)
-->
  (<s> ^operator.name list*zip-init)
}

sp {list*zip*apply*init
  (state <s> ^name list*zip
             ^operator.name list*zip-init
             ^first <first>
             ^second <second>)
-->
  (<s> ^cfirst <a>
       ^csecond <b>
       ^builder <builder>)
  (<builder> ^head nil
             ^end nil)
}

sp {list*zip*propose*return
  (state <s> ^name list*zip 
             ^cfirst nil
             ^csecond nil)
-->
  (<s> ^operator.name list*zip-return)
}

sp {list*zip*propose*continue-both
  (state <s> ^name list*zip 
             ^cfirst  <first>
             ^csecond <second>
             ^builder <builder>)
  (<builder> ^end)
  (<first> ^value <first-value>
           ^next <first-next>)
  (<first> ^value <first-value>
           ^next <first-next>)
  (<second> ^value <second-value>
           ^next <second-next>)
-->
  (<s> ^operator <o>)
  (<o> ^name list*builder*add
       ^this <builder>
       ^value <value>
       ^first-next <first-next>
       ^second-next <second-next>)
  (<value> ^first <first-value>
           ^second <second-value>)
}

sp {list*zip*propose*continue-first-done
  (state <s> ^name list*zip 
             ^cfirst nil
             ^csecond <second>
             ^builder <builder>
             ^default <default>)
  (<builder> ^end)
  (<second> ^value <second-value>
           ^next <second-next>)
-->
  (<s> ^operator <o>)
  (<o> ^name list*builder*add
       ^this <builder>
       ^value <value>
       ^first-next nil
       ^second-next <second-next>)
  (<value> ^first <default>
           ^second <second-value>)
}

sp {list*zip*propose*continue-second-done
  (state <s> ^name list*zip 
             ^cfirst <first>
             ^csecond nil
             ^builder <builder>
             ^default <default>)
  (<builder> ^end)
  (<first> ^value <first-value>
           ^next <first-next>)
-->
  (<s> ^operator <o>)
  (<o> ^name list*builder*add
       ^this <builder>
       ^value <value>
       ^first-next <first-next>
       ^second-next nil)
  (<value> ^first <first-value>
           ^second <default>)
}

sp {list*zip*apply*continue-advance
  (state <s> ^name list*zip
             ^operator.name list*builder*add
             ^cfirst <cfirst>
             ^csecond <csecond>)
  (<o> ^name list*builder*add
       ^first-next <fn>
       ^second-next <sn>)
-->
  (<s> ^cfirst <cfirst> - <fn>
       ^csecond <csecond> - <sn>)
}

sp {list*zip*apply*return
  (state <s> ^name list*zip 
             ^superstate <ss>
             ^return-to <return-to>
             ^operator.name list*zip-return
             ^builder.head <result>)
-->
  (<ss> ^<return-to> <result>)
}

