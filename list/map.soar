##!
# Apply an operator to each value in a list constructing a new list
# from the results:
#
# ^operator
#   ^name list*map
#   ^head <head-of-list>
#   ^func <name-of-operator-to-apply>
#   ^return-to <result-attribute>
#
# The operator to apply will be proposed like this:
#
# ^operator
#   ^name  <name-of-operator-to-apply>
#   ^value <list-value-to-process>
#   ^index <current-list-index>

sp {list*map*elaborate*info
  "Add info about this operator to the lib*library structure on the
   top state."
  (state <s> ^superstate nil
             ^list*library.operators <ops>)
-->
  (<ops> ^list*map <args>)
  (<args> ^default <def> 
          ^required <req>)
  (<def> ^return-to result)
  (<req> ^head nil
         ^func nil)
}

sp {list*map*propose*init
  (state <s> ^name list*map
            -^current)
-->
  (<s> ^operator.name list*map-init)
}

sp {list*map*apply*init
  (state <s> ^name list*map
             ^operator.name list*map-init
             ^head <head>)
-->
  (<s> ^current <head>
       ^result-head nil
       ^index 0)
}

sp {list*map*propose*func
  "If we're not at the end of the list, propose the func operator on 
   the current node's value. The operator will be applied..."
  (state <s> ^name list*map
             ^func <func>
            -^result
             ^current.value <value>
             ^index <index>)
-->
  (<s> ^operator <o>)
  (<o> ^name <func>
       ^value <value>
       ^index <index>)
}

sp {list*map*propose*process-func-result
  "If the func operator has posted a result, propose processing the
   result"
  (state <s> ^name list*map
             ^result)
-->
  (<s> ^operator.name list*map*process-func-result)
}


sp {list*map*apply*process-func-result*first
  "Process the function's first result where we set up the head of
   the new list we're constructing"
  (state <s> ^name list*map
             ^operator.name list*map*process-func-result
             ^result <result>
             ^result-head <result-head>
            -^result-end)
-->
  (<s> ^result <result> -
       ^result-head <result-head> - <new-result>
       ^result-end <new-result>)
  (<new-result> ^value <result> 
                ^next nil)
}

sp {list*map*apply*process-func-result
  "Process subsequent function results after the head of the new list
   has been started"
  (state <s> ^name list*map
             ^operator.name list*map*process-func-result
             ^result <result>
             ^result-end <result-end>)
-->
  (<s> ^result <result> -
       ^result-end <result-end> - <new-result>)
  (<result-end> ^next nil - <new-result>)
  (<new-result> ^value <result> 
                ^next nil)
}

sp {list*map*apply*process-func-result*advance
  "Advance the current pointer in the list while processing 
   most recent function result"
  (state <s> ^name list*map
             ^operator.name list*map*process-func-result
             ^current <current>
             ^index <index>)
  (<current> ^next <next>)
-->
  (<s> ^current <current> - <next>
       ^index <index> - (+ <index> 1))
}

sp {list*map*propose*return
  "If we've reached the end of the list, propose the return operator"
  (state <s> ^name list*map
             ^current nil)
-->
  (<s> ^operator.name list*map-return)
}

sp {list*map*apply*process-return
  "Return the resulting list"
  (state <s> ^name list*map
             ^operator.name list*map-return
             ^superstate <ss>
             ^result-head <result-head>
             ^return-to <return-to>)
-->
  (<ss> ^<return-to> <result-head>)
}

