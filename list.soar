
sp {list*apply*default*return-to
  "When initializing a list operation, set the default ^return-to
    value to 'result' if it's not given on the operator"
  (state <s> ^name << list*last list*get list*size list*reverse list*compare >>
             ^operator.name << list*last-init list*get-init list*size-init list*reverse-init list*compare-init >>
            -^return-to)
-->
  (<s> ^return-to result)
}

##########################################################################
# Operator list*last - get the last value of a list
#
# ^operator
#   ^name list*last
#   ^head <head-of-list>
#   ^return-to <name-of-result-attribute> (defaults to "result")


sp {list*last*propose*init
  (state <s> ^name list*last 
            -^current)
-->
  (<s> ^operator.name list*last-init)
}

sp {list*last*apply*init
  (state <s> ^name list*last
             ^operator.name list*last-init
             ^head <head>)
-->
  (<s> ^current <head>
       ^previous nil)
}

sp {list*last*propose*process
  (state <s> ^name list*last 
             ^current)
-->
  (<s> ^operator.name list*last-process)
}

sp {list*last*apply*process-continue
  (state <s> ^name list*last
             ^operator.name list*last-process
             ^current <current>
             ^previous <previous>)
  (<current> ^next <next>)
-->
  (<s> ^current <current> - <next>)
  (<s> ^previous <previous> - <current>)
}

sp {list*last*apply*process-return
  (state <s> ^name list*last 
             ^superstate <ss>
             ^return-to <return-to>
             ^operator.name list*last-process
             ^current nil
             ^previous <previous>)
  (<previous> ^value <value>)
-->
  (<ss> ^<return-to> <value>)
}


##########################################################################
# Operator list*get - get the kth value of a list
#
# ^operator
#   ^name list*last
#   ^head <head-of-list>
#   ^index desired index
#   ^return-to <name-of-result-attribute>

sp {list*get*propose*init
  (state <s> ^name list*get 
             -^current)
-->
  (<s> ^operator.name list*get-init)
}

sp {list*get*apply*init
  (state <s> ^name list*get
             ^operator.name list*get-init
             ^head <head>)
-->
  (<s> ^current <head> ^i 0)
}

sp {list*get*propose*process
  (state <s> ^name list*get 
             ^current)
-->
  (<s> ^operator.name list*get-process)
}

sp {list*get*apply*process
  (state <s> ^name list*get
             ^operator.name list*get-process
             ^index <index>
             ^i { <i> <> <index> }
             ^current <current>)
  (<current> ^next <next>)
-->
  (<s> ^current <current> - <next>
       ^i <i> - (+ <i> 1))
}

sp {list*get*apply*process-return
  (state <s> ^name list*get 
             ^operator.name list*get-process
             ^index <index>
             ^i <index>
             ^superstate <ss>
             ^return-to <return-to>
             ^current <current>)
  (<current> ^value <value>)
-->
  (<ss> ^<return-to> <value>)
}

##########################################################################
# Operator list*size - get the size of a list
#
# ^operator
#   ^name list*last
#   ^head <head-of-list> (nil for empty list)
#   ^return-to <name-of-result-attribute>

sp {list*size*propose*init
  (state <s> ^name list*size 
            -^current)
-->
  (<s> ^operator.name list*size-init)
}

sp {list*size*apply*init
  (state <s> ^name list*size
             ^operator.name list*size-init
             ^head <head>)
-->
  (<s> ^current <head> 
       ^count 0)
}

sp {list*size*propose*process
  (state <s> ^name list*size 
             ^current)
-->
  (<s> ^operator.name list*size-process)
}

sp {list*size*apply*process
  (state <s> ^name list*size
             ^operator.name list*size-process
             ^current <current>
             ^count <count>)
  (<current> ^next <next>)
-->
  (<s> ^current <current> - <next>
       ^count <count> - (+ <count> 1))
}

sp {list*size*apply*process-return
  (state <s> ^name list*size 
             ^operator.name list*size-process
             ^superstate <ss>
             ^return-to <return-to>
             ^current nil
             ^count <count>)
-->
  (<ss> ^<return-to> <count>)
}
          
##########################################################################
# Operator list*reverse - reverse a list
#
# ^operator
#   ^name list*last
#   ^head <head-of-list>
#   ^return-to <name-of-result-attribute> (defaults to "result")

sp {list*reverse*propose*init
  (state <s> ^name list*reverse 
            -^current)
-->
  (<s> ^operator.name list*reverse-init)
}

sp {list*reverse*apply*init
  (state <s> ^name list*reverse
             ^operator.name list*reverse-init
             ^head <head>)
-->
  (<s> ^current <head>
       ^new-head nil)
}

sp {list*reverse*propose*process
  (state <s> ^name list*reverse 
             ^current)
-->
  (<s> ^operator.name list*reverse-process)
}

sp {list*reverse*apply*process
  (state <s> ^name list*reverse
             ^operator.name list*reverse-process
             ^current <current>
             ^new-head <nh>)
  (<current> ^next <next> 
             ^value <value>)
-->
  (<s> ^current <current> - <next>
       ^new-head <nh> - <nh2>)
  (<nh2> ^next <nh> ^value <value>)
}

sp {list*reverse*apply*process-return
  (state <s> ^name list*reverse
             ^operator.name list*reverse-process
             ^superstate <ss>
             ^return-to <return-to>
             ^current nil
             ^new-head <nh>)
-->
  (<ss> ^<return-to> <nh>)
}
          
##########################################################################
# Operator list*compare - compare two lists
#
# ^operator
#   ^name list*compare
#   ^a <head-of-list-a>
#   ^b <head-of-list-b>
#   ^return-to <name-of-result-attribute> (defaults to "result")


sp {list*compare*propose*init
  (state <s> ^name list*compare 
            -^ca 
            -^cb)
-->
  (<s> ^operator.name list*compare-init)
}

sp {list*compare*apply*init
  (state <s> ^name list*compare
             ^operator.name list*compare-init
             ^a <a>
             ^b <b>)
-->
  (<s> ^ca <a>
       ^cb <b>)
}

sp {list*compare*propose*values*return-false
  (state <s> ^name list*compare 
             ^ca <ca>
             ^cb <cb>)
  (<ca> ^value <va>)
  (<cb> ^value <> <va>)
-->
  (<s> ^operator <o>)
  (<o> ^name list*compare-return ^result false)
}

sp {list*compare*propose*end-of-b*return-false
  (state <s> ^name list*compare 
             ^ca.next
             ^cb nil)
-->
  (<s> ^operator <o>)
  (<o> ^name list*compare-return ^result false)
}

sp {list*compare*propose*end-of-a*return-false
  (state <s> ^name list*compare 
             ^ca nil
             ^cb.next)
-->
  (<s> ^operator <o>)
  (<o> ^name list*compare-return ^result false)
}

sp {list*compare*propose*return-true
  (state <s> ^name list*compare 
             ^ca nil
             ^cb nil)
-->
  (<s> ^operator <o>)
  (<o> ^name list*compare-return ^result true)
}

sp {list*compare*propose*continue
  (state <s> ^name list*compare 
             ^ca.value <value>
             ^cb.value <value>)
-->
  (<s> ^operator.name list*compare-continue)
}

sp {list*compare*apply*continue
  (state <s> ^name list*compare
             ^operator.name list*compare-continue
             ^ca <ca>
             ^cb <cb>)
  (<ca> ^next <an>)
  (<cb> ^next <bn>)
-->
  (<s> ^ca <ca> - <an>
       ^cb <cb> - <bn>)
}

sp {list*compare*apply*return
  (state <s> ^name list*compare 
             ^superstate <ss>
             ^return-to <return-to>
             ^operator <o>)
  (<o> ^name list*compare-return 
       ^result <result>)
-->
  (<ss> ^<return-to> <result>)
}

